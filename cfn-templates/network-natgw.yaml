# Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
# SPDX-License-Identifier: MIT-0

AWSTemplateFormatVersion: '2010-09-09'
Description: >-
  This template provisions a NAT gateway in the existing VPC

Outputs:
  NATGWEndpointIds:
    Description: Ids of the NAT gateway endpoints
    Value: !Join
        - ','
        - - !Ref NATGateway1
          - !If [ 2AZCondition, !Ref NATGateway2, !Ref "AWS::NoValue" ]
          - !If [ 3AZCondition, !Ref NATGateway3, !Ref "AWS::NoValue" ]

Parameters:
  AvailabilityZones:
    Description: 'List of Availability Zones to use for the NAT gateway'
    Type: List<AWS::EC2::AvailabilityZone::Name>
  
  NumberOfAZs:
    AllowedValues:
      - '1'
      - '2'
      - '3'
    Default: '2'
    Description: Number of Availability Zones to use for the NAT gateway. This must match your selections in the list of Availability Zones parameter.
    Type: String

  ExistingVPCId:
    Description: Enter an existing VPC Id where to deploy the NAT gateway
    Type: String

  ExistingPrivateRouteTableIds:
    Description: Comma-delimited list of existing private route tables ids
    Type: String

  PublicSubnet1CIDR:
    AllowedPattern: ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/(1[6-9]|2[0-8]))$
    ConstraintDescription: CIDR block parameter must be in the form x.x.x.x/16-28
    Default: 10.0.128.0/20
    Description: CIDR block for the public DMZ subnet 1 located in Availability Zone 1
    Type: String

  PublicSubnet2CIDR:
    AllowedPattern: ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/(1[6-9]|2[0-8]))$
    ConstraintDescription: CIDR block parameter must be in the form x.x.x.x/16-28
    Default: 10.0.144.0/20
    Description: CIDR block for the public DMZ subnet 2 located in Availability Zone 2
    Type: String

  PublicSubnet3CIDR:
    AllowedPattern: ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/(1[6-9]|2[0-8]))$
    ConstraintDescription: CIDR block parameter must be in the form x.x.x.x/16-28
    Default: 10.0.160.0/20
    Description: CIDR block for the public DMZ subnet 3 located in Availability Zone 3
    Type: String

Conditions:
  2AZCondition: !Or
    - !Equals [!Ref 'NumberOfAZs', '2']
    - !Condition '3AZCondition'
  3AZCondition: !Equals [!Ref 'NumberOfAZs', '3']

Resources:

  # Internet Gateway
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: igw-sagemaker-admin-workshop
        - Key: project
          Value: !Sub sagemaker-admin-workshop:${AWS::Region}:${AWS::AccountId}

  VPCGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref ExistingVPCId
      InternetGatewayId: !Ref 'InternetGateway'

  # Public subnets
  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref ExistingVPCId
      CidrBlock: !Ref 'PublicSubnet1CIDR'
      AvailabilityZone: !Select ['0', !Ref 'AvailabilityZones']
      Tags:
        - Key: Name
          Value: public-sn-1-sagemaker-admin-workshop
        - Key: project
          Value: !Sub sagemaker-admin-workshop:${AWS::Region}:${AWS::AccountId}

  PublicSubnet2:
    Condition: 2AZCondition
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref ExistingVPCId
      CidrBlock: !Ref 'PublicSubnet2CIDR'
      AvailabilityZone: !Select ['1', !Ref 'AvailabilityZones']
      Tags:
        - Key: Name
          Value: public-sn-2-sagemaker-admin-workshop
        - Key: project
          Value: !Sub sagemaker-admin-workshop:${AWS::Region}:${AWS::AccountId}

  PublicSubnet3:
    Condition: 3AZCondition
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref ExistingVPCId
      CidrBlock: !Ref 'PublicSubnet3CIDR'
      AvailabilityZone: !Select ['2', !Ref 'AvailabilityZones']
      Tags:
        - Key: Name
          Value: public-sn-3-sagemaker-admin-workshop
        - Key: project
          Value: !Sub sagemaker-admin-workshop:${AWS::Region}:${AWS::AccountId}

  # Private subnet routes
  PrivateSubnet1ARoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Select ['0', !Split [',', !Ref ExistingPrivateRouteTableIds]]
      DestinationCidrBlock: '0.0.0.0/0'
      NatGatewayId: !Ref 'NATGateway1'

  PrivateSubnet2ARoute:
    Condition: 2AZCondition
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Select ['1', !Split [',', !Ref ExistingPrivateRouteTableIds]]
      DestinationCidrBlock: '0.0.0.0/0'
      NatGatewayId: !Ref 'NATGateway2'

  PrivateSubnet3ARoute:
    Condition: 3AZCondition
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Select ['2', !Split [',', !Ref ExistingPrivateRouteTableIds]]
      DestinationCidrBlock: '0.0.0.0/0'
      NatGatewayId: !Ref 'NATGateway3'

  # Public subnet route tables
  PublicSubnetRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref ExistingVPCId
      Tags:
        - Key: Name
          Value: public-rtb-sagemaker-admin-workshop
        - Key: project
          Value: !Sub sagemaker-admin-workshop:${AWS::Region}:${AWS::AccountId}

  PublicSubnetRoute:
    DependsOn: VPCGatewayAttachment
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref 'PublicSubnetRouteTable'
      DestinationCidrBlock: '0.0.0.0/0'
      GatewayId: !Ref 'InternetGateway'

  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref 'PublicSubnet1'
      RouteTableId: !Ref 'PublicSubnetRouteTable'

  PublicSubnet2RouteTableAssociation:
    Condition: 2AZCondition
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref 'PublicSubnet2'
      RouteTableId: !Ref 'PublicSubnetRouteTable'

  PublicSubnet3RouteTableAssociation:
    Condition: 3AZCondition
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref 'PublicSubnet3'
      RouteTableId: !Ref 'PublicSubnetRouteTable'

  # Elastic IP for NAT attachments
  NAT1EIP:
    DependsOn: VPCGatewayAttachment
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
      Tags:
        - Key: project
          Value: !Sub sagemaker-admin-workshop:${AWS::Region}:${AWS::AccountId}

  NAT2EIP:
    Condition: 2AZCondition
    DependsOn: VPCGatewayAttachment
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
      Tags:
        - Key: project
          Value: !Sub sagemaker-admin-workshop:${AWS::Region}:${AWS::AccountId}

  NAT3EIP:
    Condition: 3AZCondition
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
      Tags:
        - Key: project
          Value: !Sub sagemaker-admin-workshop:${AWS::Region}:${AWS::AccountId}

  # NAT Gateways
  NATGateway1:
    DependsOn: VPCGatewayAttachment
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt 'NAT1EIP.AllocationId'
      SubnetId: !Ref 'PublicSubnet1'
      Tags:
        - Key: Name
          Value: nat-gw-1-sagemaker-admin-workshop
        - Key: project
          Value: !Sub sagemaker-admin-workshop:${AWS::Region}:${AWS::AccountId}

  NATGateway2:
    Condition: 2AZCondition
    DependsOn: VPCGatewayAttachment
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt 'NAT2EIP.AllocationId'
      SubnetId: !Ref 'PublicSubnet2'
      Tags:
        - Key: Name
          Value: nat-gw-2-sagemaker-admin-workshop
        - Key: project
          Value: !Sub sagemaker-admin-workshop:${AWS::Region}:${AWS::AccountId}

  NATGateway3:
    Condition: 3AZCondition
    DependsOn: VPCGatewayAttachment
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt 'NAT3EIP.AllocationId'
      SubnetId: !Ref 'PublicSubnet3'
      Tags:
        - Key: Name
          Value: nat-gw-3-sagemaker-admin-workshop
        - Key: project
          Value: !Sub sagemaker-admin-workshop:${AWS::Region}:${AWS::AccountId}
      
  # Save resource ids in the SSM parameters
  NATGWIdsSSM:
    Type: 'AWS::SSM::Parameter'
    Properties:
      Name: !Sub sagemaker-admin-workshop-${AWS::Region}-${AWS::AccountId}-natgw-ids
      Type: String
      Value: !Join
        - ','
        - - !Ref NATGateway1
          - !If [ 2AZCondition, !Ref NATGateway2, !Ref "AWS::NoValue" ]
          - !If [ 3AZCondition, !Ref NATGateway3, !Ref "AWS::NoValue" ]
      Description: "NAT Gateway endpoint ids"